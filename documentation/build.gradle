import com.synopsys.integration.detect.docs.GenerateDocsTask

File generatedDir = new File(buildDir, "generated")
File ditaSiteDir = new File(buildDir, "ditasite")

task generateDocs(type: GenerateDocsTask) {
    dependsOn rootProject.helpJson
}

String findDita() {
    return System.getProperty("os.name").toLowerCase().contains("windows") ? 'dita.bat' : 'dita';
}

// Requires Synopsys-configured dita:
// 1. git clone https://sig-gitlab.internal.synopsys.com/doc/docs-dita-tools.git
// 2. Add docs-dita-tools/dita-ot/bin to your PATH
task ditasite() {
    dependsOn generateDocs

    doLast {
        ByteArrayOutputStream stdOut = new ByteArrayOutputStream()
        ByteArrayOutputStream stdError = new ByteArrayOutputStream()
        exec {
            commandLine findDita(), '-v', '--input=detect.ditamap', '--format=sig-webhelp', '-o', '../ditasite'
            workingDir generatedDir
            standardOutput = stdOut
            errorOutput = stdError
        }
        for (String outputLine : stdError.toString().split(System.lineSeparator())) {
            if (outputLine.matches(".*File.*helpJsonFile:.*not found.*")) throw new Exception("dita error: invalid link: " + outputLine)
        }
        for (String outputLine : stdOut.toString().split(System.lineSeparator())) {
            if (outputLine.matches(".*\\[DOT.*\\].*\\[ERROR\\].*")) throw new Exception("dita error. To run dita by hand: cd documentation/build/generated; dita --input detect.ditamap --format=sig-webhelp --output=../ditasite -v\nERROR: " + outputLine)

            if (outputLine.matches(".*\\[keyref\\].*\\[DOTJ047I\\].*")) throw new Exception("dita found invalid key references. Square brackets around doc text must be escaped if not inside back quotes. To run dita by hand: cd documentation/build/generated; dita --input detect.ditamap --format=sig-webhelp --output=../ditasite -v\nERROR: " + outputLine)
        }
        File indexHtmlFile = new File(project.getBuildDir(), "ditasite/index.html")
        println "To browse the webhelp: Open file://${indexHtmlFile.getAbsolutePath()} in a browser"
        try {
            Desktop.desktop.browse indexHtmlFile.toURI()
        } catch (Exception e) {
            println "Could not automatically open the generated ditasite (Not an error) "
        }
    }
}

task ditasourcezip(type: Zip) {
    // depending on ditasite does some validation of the files going into the dita source zip
    dependsOn ditasite

    archiveName "${rootProject.name}-${version}-ditasource.zip"
    from generatedDir
    destinationDir(file("${buildDir}/libs/"))
}

task publishDitaSource() {
    dependsOn ditasourcezip

    doLast {
        def ditaSourceZipName = "${rootProject.name}-${version}-ditasource.zip"
        def ditaSourceZipLocation = "${buildDir}/libs/${ditaSourceZipName}"
        exec {
            commandLine 'curl', '--insecure', '-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT',
                    "${project.ext.deployArtifactoryUrl}/${project.ext.artifactoryRepo}/com/synopsys/integration/${rootProject.name}/${version}/${ditaSourceZipName}", '-T', "${ditaSourceZipLocation}", '-f'
        }
    }
}

task helppdf() {
    dependsOn generateDocs

    doLast {
        exec {
            commandLine 'dita', '--input=detect.ditamap', '--format=sig-pdf', "--outputFile.base=${project.name}-${version}-help", '-o', '../../build/libs'
            workingDir generatedDir
        }
    }
}

task helpzip(type: Zip) {
    dependsOn ditasite

    archiveName "${project.name}-${version}-help.zip"
    from ditaSiteDir
    destinationDir(file("${buildDir}/libs/"))
}

task docs() {
    dependsOn ditasite
}

task cleanDocs(type: Delete) {
    delete generatedDir, ditaSiteDir
    followSymlinks = false
}

clean.dependsOn cleanDocs
