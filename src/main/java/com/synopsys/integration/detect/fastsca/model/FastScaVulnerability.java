/*
 * Copyright (C) 2023 Synopsys Inc.
 * http://www.synopsys.com/
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Synopsys ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Synopsys.
 */
package com.synopsys.integration.detect.fastsca.model;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

import javax.annotation.Nullable;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.synopsys.kb.httpclient.model.BdsaVulnerability;
import com.synopsys.kb.httpclient.model.CveVulnerability;
import com.synopsys.kb.httpclient.model.Cvss2Score;
import com.synopsys.kb.httpclient.model.Cvss3Score;
import com.synopsys.kb.httpclient.model.VulnerabilityReference;
import com.synopsys.kb.httpclient.model.VulnerabilitySource;
import com.synopsys.kb.httpclient.model.VulnerabilityStatus;

/**
 * fastSCA vulnerability.
 * 
 * Included in the fastSCA report to represent CVE and/or BDSA vulnerabilities for a component version or component
 * origin identification.
 * 
 * @author skatzman
 */
public class FastScaVulnerability {
    // Vulnerability id (CVE-2023-0001, BDSA-2023-0001, etc.)
    private final String id;

    private final VulnerabilitySource source;

    @Nullable
    private final String title;

    private final String description;

    @Nullable
    private final String technicalDescription;

    @Nullable
    private final String workaround;

    @Nullable
    private final String solution;

    private final OffsetDateTime publishedDate;

    private final OffsetDateTime lastModifiedDate;

    @Nullable
    private final OffsetDateTime disclosureDate;

    @Nullable
    private final OffsetDateTime vendorFixDate;

    @Nullable
    private final OffsetDateTime exploitAvailableDate;

    @Nullable
    private final Cvss2Score cvss2Score;

    @Nullable
    private final Cvss3Score cvss3Score;

    private final List<VulnerabilityReference> references;

    private final VulnerabilityStatus status;

    private final Set<String> tags;

    @Nullable
    private final FastScaRelatedVulnerability relatedVulnerability;

    @JsonCreator
    public FastScaVulnerability(@JsonProperty("id") String id,
            @JsonProperty("source") VulnerabilitySource source,
            @JsonProperty("title") @Nullable String title,
            @JsonProperty("description") String description,
            @JsonProperty("technicalDescription") String technicalDescription,
            @JsonProperty("workaround") String workaround,
            @JsonProperty("solution") String solution,
            @JsonProperty("publishedDate") OffsetDateTime publishedDate,
            @JsonProperty("lastModifiedDate") OffsetDateTime lastModifiedDate,
            @JsonProperty("disclosureDate") OffsetDateTime disclosureDate,
            @JsonProperty("vendorFixDate") OffsetDateTime vendorFixDate,
            @JsonProperty("exploitAvailableDate") OffsetDateTime exploitAvailableDate,
            @JsonProperty("cvss2Score") Cvss2Score cvss2Score,
            @JsonProperty("cvss3Score") Cvss3Score cvss3Score,
            @JsonProperty("references") List<VulnerabilityReference> references,
            @JsonProperty("status") VulnerabilityStatus status,
            @JsonProperty("tags") Collection<String> tags,
            @JsonProperty("relatedVulnerability") @Nullable FastScaRelatedVulnerability relatedVulnerability) {
        this.id = Objects.requireNonNull(id, "Id must be initialized.");
        this.source = Objects.requireNonNull(source, "Source must be initialized.");
        this.title = title;
        this.description = description;
        this.technicalDescription = technicalDescription;
        this.workaround = workaround;
        this.solution = solution;
        this.publishedDate = publishedDate;
        this.lastModifiedDate = lastModifiedDate;
        this.disclosureDate = disclosureDate;
        this.vendorFixDate = vendorFixDate;
        this.exploitAvailableDate = exploitAvailableDate;
        this.cvss2Score = cvss2Score;
        this.cvss3Score = cvss3Score;
        this.references = (references != null) ? ImmutableList.copyOf(references) : ImmutableList.of();
        this.status = status;
        this.tags = (tags != null) ? ImmutableSet.copyOf(tags) : ImmutableSet.of();
        this.relatedVulnerability = relatedVulnerability;
    }

    public FastScaVulnerability(CveVulnerability cveVulnerability,
    		@Nullable FastScaRelatedVulnerability relatedVulnerability) {
        Objects.requireNonNull(cveVulnerability, "CVE vulnerability must be initialized.");

        this.id = cveVulnerability.getId();
        this.source = VulnerabilitySource.NVD;
        this.title = null;
        this.description = cveVulnerability.getDescription();
        this.technicalDescription = null;
        this.workaround = null;
        this.solution = null;
        this.publishedDate = cveVulnerability.getPublishedDate();
        this.lastModifiedDate = cveVulnerability.getLastModifiedDate();
        this.disclosureDate = null;
        this.vendorFixDate = null;
        this.exploitAvailableDate = null;
        this.cvss2Score = cveVulnerability.getCvss2Score().orElse(null);
        this.cvss3Score = cveVulnerability.getCvss3Score().orElse(null);
        this.references = cveVulnerability.getReferences();
        this.status = cveVulnerability.getStatus().orElse(null);
        this.tags = ImmutableSet.of();
        this.relatedVulnerability = relatedVulnerability;
    }

    public FastScaVulnerability(BdsaVulnerability bdsaVulnerability,
            @Nullable FastScaRelatedVulnerability relatedVulnerability) {
        Objects.requireNonNull(bdsaVulnerability, "BDSA vulnerability must be initialized.");

        this.id = bdsaVulnerability.getId();
        this.source = VulnerabilitySource.BDSA;
        this.title = bdsaVulnerability.getTitle();
        this.description = bdsaVulnerability.getDescription();
        this.technicalDescription = bdsaVulnerability.getTechnicalDescription().orElse(null);
        this.workaround = bdsaVulnerability.getWorkaround().orElse(null);
        this.solution = bdsaVulnerability.getSolution().orElse(null);
        this.publishedDate = bdsaVulnerability.getPublishedDate();
        this.lastModifiedDate = bdsaVulnerability.getLastModifiedDate();
        this.disclosureDate = bdsaVulnerability.getDisclosureDate().orElse(null);
        this.vendorFixDate = bdsaVulnerability.getVendorFixDate().orElse(null);
        this.exploitAvailableDate = bdsaVulnerability.getExploitAvailableDate().orElse(null);
        this.cvss2Score = bdsaVulnerability.getCvss2Score().orElse(null);
        this.cvss3Score = bdsaVulnerability.getCvss3Score().orElse(null);
        this.references = bdsaVulnerability.getReferences();
        this.status = bdsaVulnerability.getStatus().orElse(null);
        this.tags = bdsaVulnerability.getTags();
        this.relatedVulnerability = relatedVulnerability;
    }

    /**
     * Gets the vulnerability id.
     * 
     * @return Returns the vulnerability id.
     */
    public String getId() {
        return id;
    }

    /**
     * Gets the vulnerability source.
     * 
     * @return Returns the vulnerability source.
     */
    public VulnerabilitySource getSource() {
        return source;
    }

    /**
     * Gets the title.
     * 
     * @return Returns the title.
     */
    public Optional<String> getTitle() {
        return Optional.ofNullable(title);
    }

    /**
     * Gets the description.
     * 
     * @return Returns the description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the technical description.
     * 
     * @return Returns the technical description.
     */
    public Optional<String> getTechnicalDescription() {
        return Optional.ofNullable(technicalDescription);
    }

    /**
     * Gets the workaround.
     * 
     * @return Returns the workaround.
     */
    public Optional<String> getWorkaround() {
        return Optional.ofNullable(workaround);
    }

    /**
     * Gets the solution.
     * 
     * @return Returns the solution.
     */
    public Optional<String> getSolution() {
        return Optional.ofNullable(solution);
    }

    /**
     * Gets the published date.
     * 
     * @return Returns the published date.
     */
    public OffsetDateTime getPublishedDate() {
        return publishedDate;
    }

    /**
     * Gets the last modified date.
     * 
     * @return Returns the last modified date.
     */
    public OffsetDateTime getLastModifiedDate() {
        return lastModifiedDate;
    }

    /**
     * Gets the disclosure date.
     * 
     * @return Returns the disclosure date.
     */
    public Optional<OffsetDateTime> getDisclosureDate() {
        return Optional.ofNullable(disclosureDate);
    }

    /**
     * Gets the vendor fix date.
     * 
     * @return Returns the vendor fix date.
     */
    public Optional<OffsetDateTime> getVendorFixDate() {
        return Optional.ofNullable(vendorFixDate);
    }

    /**
     * Gets the exploit available date.
     * 
     * @return Returns the exploit available date.
     */
    public Optional<OffsetDateTime> getExploitAvailableDate() {
        return Optional.ofNullable(exploitAvailableDate);
    }

    /**
     * Gets the CVSS2 score.
     * 
     * @return Returns the CVSS2 score.
     */
    public Optional<Cvss2Score> getCvss2Score() {
        return Optional.ofNullable(cvss2Score);
    }

    /**
     * Gets the CVSS3 score.
     * 
     * @return Returns the CVSS3 score.
     */
    public Optional<Cvss3Score> getCvss3Score() {
        return Optional.ofNullable(cvss3Score);
    }

    /**
     * Gets the references.
     * 
     * @return Returns the references.
     */
    public List<VulnerabilityReference> getReferences() {
        return references;
    }

    /**
     * Gets the status.
     * 
     * @return Returns the status.
     */
    public Optional<VulnerabilityStatus> getStatus() {
        return Optional.ofNullable(status);
    }

    /**
     * Gets the tags.
     * 
     * @return Returns the tags.
     */
    public Set<String> getTags() {
        return tags;
    }

    /**
     * Gets the related vulnerability.
     * 
     * @return Returns the related vulnerability.
     */
    public Optional<FastScaRelatedVulnerability> getRelatedVulnerability() {
        return Optional.ofNullable(relatedVulnerability);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getSource(), getTitle(), getDescription(), getTechnicalDescription(), getWorkaround(), getSolution(), getPublishedDate(),
                getLastModifiedDate(), getDisclosureDate(), getVendorFixDate(), getExploitAvailableDate(), getCvss2Score(), getCvss3Score(), getReferences(),
                getStatus(), getTags(), getRelatedVulnerability());
    }

    @Override
    public boolean equals(Object otherObject) {
        if (this == otherObject) {
            return true;
        } else if (otherObject instanceof FastScaVulnerability) {
            FastScaVulnerability otherFastScaVulnerability = (FastScaVulnerability) otherObject;

            return Objects.equals(getId(), otherFastScaVulnerability.getId())
                    && Objects.equals(getSource(), otherFastScaVulnerability.getSource())
                    && Objects.equals(getTitle(), otherFastScaVulnerability.getTitle())
                    && Objects.equals(getDescription(), otherFastScaVulnerability.getDescription())
                    && Objects.equals(getTechnicalDescription(), otherFastScaVulnerability.getTechnicalDescription())
                    && Objects.equals(getWorkaround(), otherFastScaVulnerability.getWorkaround())
                    && Objects.equals(getSolution(), otherFastScaVulnerability.getSolution())
                    && Objects.equals(getPublishedDate(), otherFastScaVulnerability.getPublishedDate())
                    && Objects.equals(getLastModifiedDate(), otherFastScaVulnerability.getLastModifiedDate())
                    && Objects.equals(getPublishedDate(), otherFastScaVulnerability.getPublishedDate())
                    && Objects.equals(getDisclosureDate(), otherFastScaVulnerability.getDisclosureDate())
                    && Objects.equals(getVendorFixDate(), otherFastScaVulnerability.getVendorFixDate())
                    && Objects.equals(getExploitAvailableDate(), otherFastScaVulnerability.getExploitAvailableDate())
                    && Objects.equals(getCvss2Score(), otherFastScaVulnerability.getCvss2Score())
                    && Objects.equals(getCvss3Score(), otherFastScaVulnerability.getCvss3Score())
                    && Objects.equals(getReferences(), otherFastScaVulnerability.getReferences())
                    && Objects.equals(getStatus(), otherFastScaVulnerability.getStatus())
                    && Objects.equals(getTags(), otherFastScaVulnerability.getTags())
                    && Objects.equals(getRelatedVulnerability(), otherFastScaVulnerability.getRelatedVulnerability());
        }

        return false;
    }
}
