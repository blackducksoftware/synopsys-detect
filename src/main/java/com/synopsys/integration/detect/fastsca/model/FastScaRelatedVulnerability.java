package com.synopsys.integration.detect.fastsca.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.synopsys.bd.kb.httpclient.model.RelatedVulnerability;
import com.synopsys.kb.httpclient.model.VulnerabilitySource;

/**
 * fastSCA related vulnerability..
 * 
 * @author skatzman
 */
public class FastScaRelatedVulnerability {
    private final VulnerabilitySource source;

    private final String id;

    /**
     * Constructs the related vulnerability.
     * 
     * @param source
     *            The vulnerability source of the related vulnerability.
     * @param id
     *            The vulnerability id of the related vulnerability.
     */
    @JsonCreator
    public FastScaRelatedVulnerability(@JsonProperty("source") VulnerabilitySource source, @JsonProperty("id") String id) {
        this.source = Objects.requireNonNull(source, "Source must be initialized.");
        this.id = Objects.requireNonNull(id, "Id must be initialized.");
    }

    public FastScaRelatedVulnerability(RelatedVulnerability relatedVulnerability) {
    	Objects.requireNonNull(relatedVulnerability, "Related vulnerability must be initialized.");
    	
    	this.source = relatedVulnerability.getSource();
    	this.id = relatedVulnerability.getId();
    }
    
    /**
     * Gets the source.
     * 
     * @return Returns the source.
     */
    public VulnerabilitySource getSource() {
        return source;
    }

    /**
     * Gets the id.
     * 
     * @return Returns the id.
     */
    public String getId() {
        return id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(getSource(), getId());
    }

    @Override
    public boolean equals(Object otherObject) {
        if (this == otherObject) {
            return true;
        } else if (otherObject instanceof FastScaRelatedVulnerability) {
        	FastScaRelatedVulnerability otherFastScaRelatedVulnerability = (FastScaRelatedVulnerability) otherObject;

            return Objects.equals(getSource(), otherFastScaRelatedVulnerability.getSource())
                    && Objects.equals(getId(), otherFastScaRelatedVulnerability.getId());
        }

        return false;
    }
}
